# This is to keep track of the various package and dependency installs done while developing the project

node -v
npm -v
yarn -v
#creates package.json
npm init -y

# to get typescript and node to behave with each other
# set up dependency using
yarn add -D @types/node typescript
# this gives you access to the type information for all node built-in functions

#in package.json, add a new script
# "scripts":
#   "start":"ts-node server/src/index.ts"

# to install that:
yarn add -D ts-node

#before running index.ts, you need to set up a config for typescript
# you can download the boilerplate typescript configuration file using
# npx tsconfig.json
# it prompts which framework, answer 'node'

#in package.json, add these new scripts
#  "scripts": {
#    "watch": "tsc -w",
#    "dev": "nodemon dist/index.js",
#    "start": "node dist/index.js",
#    "start2": "ts-node server/src/index.ts",
#    "dev2": "nodemon --exec ts-node server/src/index.ts"
#  },

yarn add subscription-transport-ws
# shouldn't be needed, already done above:
#npm i @types/node

yarn add urql
yarn add react

#see DefinitelyTyped/issues/47339
yarn remove @types-express

yarn add express apollo-server-express graphql type-graphql
yarn add -D @types/express
yarn add -D reflect-metadata

yarn add -D @graphql-codegen/typescript-urql

#see https://typegraphql.com/docs/validation.html#caveats
# Even if we don't use the validation feature (and we have provided { validate: false }
# option to buildSchema), we still need to have class-validator installed as a dev
# dependency in order to compile our app without errors using tsc.
yarn add -D class-validator

# create app, this creates a folder by the name web, that last parameter:
# you can pick any next.js, it will just affect what it looks like
# the below command will pick up the example from
#   github.com/vercel/next.js/tree/canary/examples/with-chakra-ui
# start in the root folder, temporary back up / rename web to web2
cd ..
mv web web2
yarn create next-app --example with-chakra-ui web
# then restore the already existing web2/src/utils/createUrqlClient.ts to the web folder

#Success! Created web at /Users/Jurgen/Documents/business-products/Clusterwell/Factory/ciodash/web
#Inside that directory, you can run several commands:
#
#  yarn dev
#    Starts the development server.
#
#  yarn build
#    Builds the app for production.
#
#  yarn start
#    Runs the built app in production mode.
#
#We suggest that you begin by typing:
#
#  cd web
#  yarn dev

cd web
yarn dev

# then I removed all the wev/src/components/*.js files
# removed Readme file
# I reduced the src/pages/index.tsx (after renaming it from .js) to
##const Index = () => <div>Hello World!</div>;
##export default Index
# I renamed the src/pages/_app.tsx from .js
# I renamed the src/theme.tsx from .js
#then restart yarn dev
# which responded with
# We detected TypeScript in your project and created a tsconfig.json file for you.

yarn add formik

#    // by default, Apollo implies
#    //     , cors: {origin: "*"}
#    // but that will throw a CORS error as soon as you turn on
#    // (in urql's graphql createClient) fetchoptions: { credentials: "include" }
#    //
#    // so, we could set up the origin here to avoid that once we get to using credentials
#    //         apolloServer.applyMiddleware({
#    //             app
#    //             , cors: {origin: "http://localhost:3000"}
#    //         });
#    // however, we would rather expand the cors setup beyond Apollo's middleware routes
#    // and so we will disable it here and we
#    // and will set up cors globally: download a cors middleware package from express
#    // (on server folder, 'yarn cors' to add, and add import
cd ../server
yarn add cors
yarn add -D @types/cors

#                // notice that the hook function
#                //                const response = updateOneJob(
#                // returns a type <any> by default
#                //                const response: Promise<OperationResult<any>>
#                // which is not very useful when you want to get specific responses
#                // to handle (like errors), which our graphql resolver returns and
#                // would fall between the cracks unless we do something with it
#                //
#                // this is why we use the graphql-code-generator package.
#                // it will create hook functions with properly defined return types
#                // that we can use in the forms such as jobs.tsx
#                // see http://graphql-code-generator.com/docs/getting-started/installation
# go to the web folder
cd ../web
yarn add -D @graphql-codegen/cli

# run the wizard
yarn graphql-codegen init
responses to the wizard:
What type of application are you building?
(default) Application built with React
Where is your schema?: (path or url) (http://localhost:4000)
 http://localhost:4000/graphql
Where are your operations and fragments?: (src/**/*.graphql)
src/graphql/**/*.graphql
Pick plugins: (Press <space> to select, <a> to toggle all, <i> to invert selection)
TypeScript React Apollo (typed components and HOCs)
Where to write the output: (src/generated/graphql.tsx)
keep the default, and create the folder just in case it doesn't generate it itself
Do you want to generate an introspection file? (Y/n) n
How to name the config file? (codegen.yml)
codegen.yaml
What script in package.json should run the codegen?
gen

Based on the responses, the wizard above will create codegen.yaml
NOW EDIT that file, replace
      - "typescript-react-apollo"
with
      - "typescript-urql"
MAKE THE CORRESPONDING change in package.json, remove under "devDependencies": {
    "@graphql-codegen/typescript-react-apollo": "2.0.7",

#install the plugin, see http://graphql-code-generator.com/docs/getting-started/installation
#  do a search on this site for 'urql'
#  pick typescript-urql, which brings you to
#                http://graphql-code-generator.com/docs/generated-config/typescript.urql
# the command found there to execute is:
yarn add -D graphql-codegen/typescript-urql

#create these folders:
web/src/generated
web/src/graphql/mutations
web/src/graphql/queries

# whenever you create/edit a .graphql file, run in a terminal window:
yarn gen
#which creates/maintains file generated/graphql.tsx

## subscription support
On Server folder:
yarn add graphql-subscriptions
yarn add graphql-composer

## websocket support
On Web folder:
#XXXXXXXXX it's a problem because the client exchange setup code may be executed either in browser or on server
#XXXXXXXXX (and mobile devices have their own websocket library requirement)
#XXXXXXXXX so rather than switching websocket instantiation code based on context - browser or server side execution -
#XXXXXXXXX we will now set up Server Side Rendering, and urql has a good package for that:
#See docs at http://formidable.com/open-source/urql/docs/advanced/server-side-rendering/#nextjs
On Web folder:
yarn add next-urql react-is
# now implement ws
yarn add ws @types/ws
yarn add express-ws @types/express-ws

#Note that if you are using Next before v9.4 you'll need to polyfill fetch, this can be done through isomorphic-unfetch.
# but in this project we are using next@^9.1.7: version "9.5.1" and it appears that indeed we can skip that dependency


# for the forms, to follow an example which uses React Hooks I got the example's form library:
# NOTE: remove antd once there's time to revert back to developing forms based on chakra-ui package
yarn add antd
yarn add @types/antd
 #Also, add antd css to load stylings by editing the entry script:
 # # src/index.tsx
 #
 # ....
 # import 'antd/dist/antd.css';

############
# INSTALL KAFKA - GRAPHQL PACKAGE
# Mac OS High Sierra / Mojave
#OpenSSL has been upgraded in High Sierra and homebrew does not overwrite default system libraries.
#That means when building node-rdkafka, because you are using openssl, you need to tell
#the linker where to find it:
export CPPFLAGS=-I/usr/local/opt/openssl/include
export LDFLAGS=-L/usr/local/opt/openssl/lib
cd ../server
# yarn failed with various 'gyp' errors (yarn add graphql-kafka-subscriptions)
# npm failed with various 'gyp' errors incl gyp: No Xcode or CLT version detected! (npm install graphql-kafka-subscriptions)
# Seems related to Mac OS Catalina ... SOLUTION: Reinstall command-line tools by removing the previously installed version
# https://medium.com/flawless-app-stories/gyp-no-xcode-or-clt-version-detected-macos-catalina-anansewaa-38b536389e8d
# this failed, the wizard could not find the update. Download manually from here:
# https://developer.apple.com/download/more/
#xcode-select --print-path
# this printed: /Library/Developer/CommandLineTools
#sudo rm -r -f /Library/Developer/CommandLineTools
#xcode-select --install
####yarn add graphql-kafka-subscriptions
#
# I ABANDONED THE ABOVE as it did not mix well with my existing graphql server resolver
#
yarn add kafka-node @types/kafka-node
